#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 17:17:45 2022

@author: student
"""
#!/usr/bin/env python3


PACKAGE = "ens_voiture_autonome"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

aeb = gen.add_group("AEB")
aeb.add("aeb_distance",    double_t,    0, "lookahead predictive distance", 0.6,  0.1, 4)
aeb.add("TTC_threshold",    double_t,    0, "time to collide threshold", 0.6,  0.1, 4)
aeb.add("aeb_count_threshold",    int_t,    0, "number of warning before emergency breaking", 3,  0, 10)

size_enum = gen.enum([ gen.const("MANUAL",      int_t, 0, "MANUAL"),
                       gen.const("PURE_PURSUIT",     int_t, 1, "PURE PURSUIT"),
                       gen.const("STANLEY_CONTROLLER",      int_t, 2, "STANLEY CONTROLLER"),
                       gen.const("LOCAL_STEERING_CONTROLLER", int_t, 3, "LOCAL STEERING CONTROLLER"),
                       gen.const("DWA", int_t, 4, "DWA"),
                       gen.const("MOVE_BASE", int_t, 5, "MOVE BASE"),
                       gen.const("FOLLOW_THE_GAP", int_t, 6, "FOLLOW THE GAP")],
                     "An enum to set size")

gen.add("driving_mode", int_t, 0, "Wich steering method is used", 0, 0, 6, edit_method=size_enum)

enum = gen.enum([ gen.const("MANUAL",      int_t, 0, "MANUAL"),
                       gen.const("CONSTANT",     int_t, 1, "CONSTANT"),
                       gen.const("GAUSSIAN",      int_t, 2, "GAUSSIAN"),
                       gen.const("BINARY", int_t, 3, "BINARY"),
                       gen.const("LINEAR", int_t, 4, "LINEAR"),
                       gen.const("RECORDED", int_t, 5, "RECORDED")],
                     "An enum to set size")

gen.add("speed_mode", int_t, 0, "How the speed is calculated", 0, 0, 5, edit_method=enum)

speed = gen.add_group("Speed control")
speed.add("max_velocity",   double_t,   0, "maximum velocity",  2.5, 0 ,5)
speed.add("corner_speed_coef",   double_t,   0, "corner speed : max_speed * coef",  0.5, 0 ,1)
speed.add("binary_steering_threshold",   double_t,   0, "threshold for binary steering speed behaviour",  0.1, 0 ,1)
speed.add("obstacle_speed_coef",   double_t,   0, "speed near obstacle : max_speed * coef",  0.5, 0 ,1)



exit(gen.generate(PACKAGE, "ens_voiture_autonome", "Controller"))

