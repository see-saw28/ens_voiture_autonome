#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 17:17:45 2022

@author: student
"""
#!/usr/bin/env python3


PACKAGE = "ens_voiture_autonome"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

size_enum = gen.enum([ gen.const("Yes",      bool_t, True, "Yes"),
                       gen.const("No",     bool_t, False, "No")],
                     "Detect obstacle")

gen.add("with_pure_pursuit", bool_t, 0, "If combine with pure pursuit, work only when a collision is detected", False, edit_method=size_enum)

pp = gen.add_group("Dynamic look-ahead distance for the goal point")
pp.add("look_ahead_dist",    double_t,    0, "Look-ahead distance (static)", 1.0,  0.1, 5)
pp.add("k",    double_t,    0, "Look forward gain (Dynamic look-ahead)", 0.5,  0, 5)



car = gen.add_group('Car params')
car.add("wheelbase_length",    double_t,    0, "Wheelbase length of the car (m)", 0.257,  0.1, 5)

size_enum = gen.enum([ gen.const("Circle",      int_t, 0, "Yes"),
                       gen.const("Rectangle",     int_t, 1, "No")],
                     "Robot shape")
car.add("robot_type", int_t, 0, "Robot type", 1, edit_method=size_enum)
car.add("robot_width",    double_t,    0, "Width of the car (Ã¹)", 0.17,  0, 1)
car.add("robot_length",    double_t,    0, "Length of the car (m)", 0.4,  0, 2)
car.add("robot_radius",    double_t,    0, "Radius of the robot (m)", 0.2,  0, 2)
car.add("max_steering_angle",    double_t,    0, "Max steering angle of the car (rad)", 0.3,  0, 1)
car.add("steering_speed",    double_t,    0, "Steering speed (rad/s)", 6.0,  0, 10)
car.add("steering_resolution",    double_t,    0, "Steering resolution (rad)", 0.01,  0.01, 0.5)
car.add("max_yaw_rate",    double_t,    0, "Max yaw rate of the car (rad/s)", 2.5,  0, 10)



time = gen.add_group("Time params for motion prediction")
time.add("dt",    double_t,    0, "Time tick)", 0.1,  0.01, 1)
time.add("predict_time",    double_t,    0, "Total time for prediction", 1.5,  0.5, 5)

cost = gen.add_group("Cost gain params")
time.add("to_goal_cost_gain",    double_t,    0, "Time tick)", 0.3,  0, 5)
time.add("obstacle_cost_gain",    double_t,    0, "Total time for prediction", 1.0,  0, 5)

exit(gen.generate(PACKAGE, "ens_voiture_autonome", "LSC"))
